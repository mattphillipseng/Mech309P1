% Plotting
% This script uses r_g and ref_h primarily

%% Times to plot, time steps
T = sqrt(((4*pi^2)/mu1)*a^3); %Orbital period, seconds
t = linspace(0,T,1000); % times to plot


%% Processing Data
% Getting time steps
for lv1 = 1:length(t)
    t1 = t(lv1);
    % to get the last point to compare to the 1st point, since the orbit
    % comes back to its initial position
    if lv1==1000
        t2=0;
    else
        t2 = t(lv1+1);
    end
    
    dt = abs(t2-t1);
    
    % storing to dts data
    dts(lv1,:) = dt;
end

% Calculating angular momentum errors at each time step
for lv2 = 1:length(t)
    p1 = lv2;
    
    % to get the last point to compare to the 1st point, since the orbit
    % comes back to its initial position
    if lv2==1000
        p2=1;
    else
        p2 = lv2+1;
    end
    
    r1 = [r_g(p1,1);r_g(p1,2);r_g(p1,3)];
    r2 = [r_g(p2,1);r_g(p2,2);r_g(p2,3)];
    T_triangle = 0.5*norm( cross(r1)*r2 ); %triangle area between 2 points in the orbit
    
    %Sl
    iter = 0;
    eta=1.5;
    eta_next = eta+1; % To ensure the while loop is entered.
    while (abs(eta_next - eta) > 0.000001) && (iter <100)
        eta = eta_next;
        eta_next = eta - eval_f(eta,l_whole,m_whole)/eval_deriv_f(eta,l_whole,m_whole);
        iter = iter+1;
    end
    eta;
    iter;
    
    S = eta*T_triangle;
    h = 2*S*(1/dts(lv1))
        
    
end

%close all
font_size = 15;
line_size = 15;
line_width = 2;

% figure
% plot(t/3600,th_data/pi,'r','Linewidth',line_width);
% % title('Relative error of angular momentum as a function of time')
% xlabel('$Time$ (Hours)','fontsize',font_size,'Interpreter','latex');
% ylabel('Relative Error for Angular Momentum','fontsize',font_size,'Interpreter','latex');
% print('plots/energy','-depsc','-r720');