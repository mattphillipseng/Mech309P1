function [rg1,vg1] = find_v_given_position_data(rg1,rg2,t1,t2)
% Find vg1 given rg1, rg2, t1, and t2.
% Once rg1 and vg1 are found, the orbital elements can be computed. 

orbital_constants

% Here is where you will write code to find vg1 given rg1, rg2, t1, and t2.

T_triangle = 0.5*norm( cross(rg1)*rg2 ); %triangle area between rg1, rg2, center of earth
delta_theta = asin( T_triangle /(0.5*norm(rg1)*norm(rg2)) ); %from same formula as above

m_numerator = mu1*((t2-t1)^2)
m_denom = ( 2 * sqrt(norm(rg1)*norm(rg2)) * cos(delta_theta/2) )^3
m = m_numerator/m_denom


l_numerator = norm(rg1) + norm(rg2)
l_denom = 4 * sqrt(norm(rg1) * norm(rg2)) * cos(delta_theta/2)
l = (l_numerator/l_denom) - 0.5



%eta must be between 1 and 2
iter = 0;
xa = 1;
xb = 1.3;
f=1
while ((xb-xa)>=0.0001) && (iter<=100)  
    eta = (xb+xa)/2
    
    mid = eval(eta)
    left = eval(xa)
    right = eval(xb)
    
    if(mid*left)>0
        left=mid
    
    iter=iter+1
end

    function f = eval_f(x)
        w = (m/(x^2))-l
        g = 2*asin(sqrt(w))
        W = (2*g - sin(2*g)) / (sin(g))^3
        f = 1-x+(m/x^2)*W
    end





% Some dummy values; delete these once you start writing your own code.
rg1 = [Re + 450*1000; Re + 550*1000; Re + 650*1000];
vg1 = [-2000; 1000; 4000];

end